nSims <- 1e4 # number of simulated experiments
p <- numeric(nSims) # set up empty variable to store all simulated p-values
for (i in 1:nSims) {
x <- rnorm(n = n, mean = 0, sd = 1) # produce N simulated participants
y <- rnorm(n = n, mean = 0 + cohensd, sd = 1) # produce N simulated participants
z <- t.test(x,y) # perform a t-test for independant samples
p[i] <- z$p.value # extract p-value
}
empirical_power <- (sum(p < .005) / nSims)
if (cohensd == 0) {empirical_power <- 0} # if H0, then power = 0
hist(p, breaks = 20, ylab = "number of p-values", border = FALSE,
main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"),
xlim = c(0, 1), ylim = c(0, nSims), col = "steelblue")
abline(h = nSims / 20, lty = 2)
options(scipen = 999) # disable scientific notation for numbers
cohensd <- 0.2  # set true effect size
n <- 100 # sample size in each group
nSims <- 1e4 # number of simulated experiments
p <- numeric(nSims) # set up empty variable to store all simulated p-values
for (i in 1:nSims) {
x <- rnorm(n = n, mean = 0, sd = 1) # produce N simulated participants
y <- rnorm(n = n, mean = 0 + cohensd, sd = 1) # produce N simulated participants
z <- t.test(x,y) # perform a t-test for independant samples
p[i] <- z$p.value # extract p-value
}
empirical_power <- (sum(p < .005) / nSims)
if (cohensd == 0) {empirical_power <- 0} # if H0, then power = 0
hist(p, breaks = 20, ylab = "number of p-values", border = FALSE,
main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"),
xlim = c(0, 1), ylim = c(0, nSims), col = "steelblue")
abline(h = nSims / 20, lty = 2)
abline(v = .005, lty = 2)
abline(v = .05, lty = 2)
1/20
lines(
p, breaks = 20, ylab = "number of p-values", border = FALSE,
main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"),
xlim = c(0, 1), ylim = c(0, nSims), col = "steelblue")
lines(p)
p
density(p)
plot(density(p), add = T)
abline(h = nSims / 20, lty = 2)
abline(v = .005, lty = 2)
abline(v = .05, lty = 2)
plot(density(p), xlim = c(0, 1) )
plot(density(p), xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue")
plot(density(p), xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
abline(h = nSims / 20, lty = 2)
abline(v = .005, lty = 2)
abline(v = .05, lty = 2)
abline(v = .005, lty = 2, col = "steelblue")
abline(v = .05, lty = 2, col = "steelblue")
abline(v = .005, lty = 2, lwd = 2, col = "steelblue")
abline(v = .05, lty = 2, lwd = 2, col = "steelblue")
options(scipen = 999) # disable scientific notation for numbers
cohensd <- 0.2  # set true effect size
n <- 100 # sample size in each group
nSims <- 1e4 # number of simulated experiments
p <- numeric(nSims) # set up empty variable to store all simulated p-values
for (i in 1:nSims) {
x <- rnorm(n = n, mean = 0, sd = 1) # produce N simulated participants
y <- rnorm(n = n, mean = 0 + cohensd, sd = 1) # produce N simulated participants
z <- t.test(x,y) # perform a t-test for independant samples
p[i] <- z$p.value # extract p-value
}
empirical_power <- (sum(p < .005) / nSims)
if (cohensd == 0) {empirical_power <- 0} # if H0, then power = 0
hist(
p, breaks = 20, ylab = "number of p-values", border = FALSE,
main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"),
xlim = c(0, 1), ylim = c(0, nSims), col = "steelblue")
abline(h = nSims / 20, lty = 2)
abline(v = .005, lty = 2)
abline(v = .05, lty = 2)
plot(density(p), xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
abline(v = .005, lty = 2, lwd = 2, col = "steelblue")
abline(v = .05, lty = 2, lwd = 2, col = "steelblue")
plot(density(p), bty = "l",  xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
plot(density(p), bty = "n",  xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
?bty
plot(density(p), bty = "c",  xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
plot(density(p), bty = "o",  xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
plot(density(p), bty = "a",  xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
plot(density(p), bty = "n",  xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
plot(density(p), bty = "n", yaxt = "n", xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
plot(density(p), bty = "o", yaxt = "n", xlim = c(0, 1), ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
plot(
density(p), bty = "o", yaxt = "n", xlim = c(0, 1),
xlab = "", ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
abline(v = .005, lty = 2, lwd = 2, col = "steelblue")
abline(v = .05, lty = 2, lwd = 2, col = "steelblue")
plot(
density(p), log = "x", bty = "o", yaxt = "n", xlim = c(0, 1),
xlab = "", ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
plot(
density(p), log = "x", bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
abline(v = .005, lty = 2, lwd = 2, col = "steelblue")
abline(v = .05, lty = 2, lwd = 2, col = "steelblue")
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
abline(v = .005, lty = 2, lwd = 3, col = "steelblue")
abline(v = .05, lty = 2, lwd = 3, col = "steelblue")
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power"), col = "steelblue", lwd = 2)
abline(v = .005, lty = 3, lwd = 2, col = "steelblue")
abline(v = .05, lty = 3, lwd = 2, col = "steelblue")
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power & alpha =", alpha), col = "steelblue", lwd = 2)
alpha <- .005
empirical_power <- (sum(p < alpha) / nSims)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power & alpha =", alpha), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "\n % power & alpha =", alpha), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution with",
round(empirical_power * 100, digits = 0), "% power & alpha =", alpha), col = "steelblue", lwd = 2)
xlab = "", ylab = "", main = paste("p-value distribution for d =", cohensd, "and n =", n, "\n power = ,
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution for with",
round(empirical_power * 100, digits = 0), "% power & alpha =", alpha), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution for", "\n with",
round(empirical_power * 100, digits = 0), "% power & alpha =", alpha), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "", main = paste("p-value distribution for d = ", cohensd, "and n =", n, "\n with",
round(empirical_power * 100, digits = 0), "% power & alpha =", alpha), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste("p-value distribution for d = ", cohensd, "and n =", n, "\n with",
round(empirical_power * 100, digits = 0), "% power (at alpha =", alpha, ")"), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, "and n =", n, "\n with",
"power = ", round(empirical_power * 100, digits = 0), "(at alpha =", alpha, ")"), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, "and n =", n,
"\n power = ", round(empirical_power * 100, digits = 0), "(at alpha =", alpha, ")"), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, "and n =", n,
"\n power = ", round(empirical_power, digits = 2), "(at alpha =", alpha, ")"), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, "and n =", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha =", alpha, ")"), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha =", alpha, ")"), col = "steelblue", lwd = 2)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha = ", alpha, ")"),
col = "steelblue", lwd = 2)
abline(v = alpha, lty = 3, lwd = 2, col = "steelblue")
options(scipen = 999) # disable scientific notation for numbers
cohensd <- 0.2  # set true effect size
n <- 100 # sample size in each group
nSims <- 1e4 # number of simulated experiments
p <- numeric(nSims) # set up empty variable to store all simulated p-values
for (i in 1:nSims) {
x <- rnorm(n = n, mean = 0, sd = 1) # produce N simulated participants
y <- rnorm(n = n, mean = 0 + cohensd, sd = 1) # produce N simulated participants
z <- t.test(x,y) # perform a t-test for independant samples
p[i] <- z$p.value # extract p-value
}
alpha <- .05
empirical_power <- (sum(p < alpha) / nSims)
if (cohensd == 0) {empirical_power <- 0} # if H0, then power = 0
# hist(
#     p, breaks = 20, ylab = "number of p-values", border = FALSE,
#     main = paste("p-value distribution with",
#         round(empirical_power * 100, digits = 0), "% power"),
#     xlim = c(0, 1), ylim = c(0, nSims), col = "steelblue")
#
# abline(h = nSims / 20, lty = 2)
# abline(v = .005, lty = 2)
# abline(v = .05, lty = 2)
par(mfrow(1, 2) )
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha = ", alpha, ")"),
col = "steelblue", lwd = 2)
abline(v = alpha, lty = 3, lwd = 2, col = "steelblue")
par(mfrow(1, 2) )
par(mfrow = c(1, 2) )
options(scipen = 999) # disable scientific notation for numbers
cohensd <- 0.5 # set true effect size
n <- 50 # sample size in each group
nSims <- 1e4 # number of simulated experiments
p <- numeric(nSims) # set up empty variable to store all simulated p-values
for (i in 1:nSims) {
x <- rnorm(n = n, mean = 0, sd = 1) # produce N simulated participants
y <- rnorm(n = n, mean = 0 + cohensd, sd = 1) # produce N simulated participants
z <- t.test(x,y) # perform a t-test for independant samples
p[i] <- z$p.value # extract p-value
}
alpha <- .05
empirical_power <- (sum(p < alpha) / nSims)
if (cohensd == 0) {empirical_power <- 0} # if H0, then power = 0
# hist(
#     p, breaks = 20, ylab = "number of p-values", border = FALSE,
#     main = paste("p-value distribution with",
#         round(empirical_power * 100, digits = 0), "% power"),
#     xlim = c(0, 1), ylim = c(0, nSims), col = "steelblue")
#
# abline(h = nSims / 20, lty = 2)
# abline(v = .005, lty = 2)
# abline(v = .05, lty = 2)
par(mfrow = c(1, 2) )
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha = ", alpha, ")"),
col = "steelblue", lwd = 2)
abline(v = alpha, lty = 3, lwd = 2, col = "steelblue")
alpha <- .005
empirical_power <- (sum(p < alpha) / nSims)
if (cohensd == 0) {empirical_power <- 0} # if H0, then power = 0
par(mfrow = c(1, 2) )
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha = ", alpha, ")"),
col = "steelblue", lwd = 2)
abline(v = alpha, lty = 3, lwd = 2, col = "steelblue")
par(mfrow = c(1, 1) )
options(scipen = 999) # disable scientific notation for numbers
cohensd <- 0.5 # set true effect size
n <- 50 # sample size in each group
nSims <- 1e4 # number of simulated experiments
p <- numeric(nSims) # set up empty variable to store all simulated p-values
for (i in 1:nSims) {
x <- rnorm(n = n, mean = 0, sd = 1) # produce N simulated participants
y <- rnorm(n = n, mean = 0 + cohensd, sd = 1) # produce N simulated participants
z <- t.test(x,y) # perform a t-test for independant samples
p[i] <- z$p.value # extract p-value
}
alpha <- .005
empirical_power <- (sum(p < alpha) / nSims)
if (cohensd == 0) {empirical_power <- 0} # if H0, then power = 0
# hist(
#     p, breaks = 20, ylab = "number of p-values", border = FALSE,
#     main = paste("p-value distribution with",
#         round(empirical_power * 100, digits = 0), "% power"),
#     xlim = c(0, 1), ylim = c(0, nSims), col = "steelblue")
#
# abline(h = nSims / 20, lty = 2)
# abline(v = .005, lty = 2)
# abline(v = .05, lty = 2)
par(mfrow = c(1, 2) )
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha = ", alpha, ")"),
col = "steelblue", lwd = 2)
abline(v = alpha, lty = 3, lwd = 2, col = "steelblue")
alpha <- .005
empirical_power <- (sum(p < alpha) / nSims)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha = ", alpha, ")"),
col = "steelblue", lwd = 2)
abline(v = alpha, lty = 3, lwd = 2, col = "steelblue")
alpha <- .05
empirical_power <- (sum(p < alpha) / nSims)
par(mfrow = c(1, 2) )
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha = ", alpha, ")"),
col = "steelblue", lwd = 2)
abline(v = alpha, lty = 3, lwd = 2, col = "steelblue")
alpha <- .005
empirical_power <- (sum(p < alpha) / nSims)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha = ", alpha, ")"),
col = "steelblue", lwd = 2)
abline(v = alpha, lty = 3, lwd = 2, col = "steelblue")
abline(v = mean(p), lty = 3, lwd = 2, col = "snow4")
abline(v = mean(p), lty = 1, lwd = 2, col = "snow4")
options(scipen = 999) # disable scientific notation for numbers
cohensd <- 0.5 # set true effect size
n <- 50 # sample size in each group
nSims <- 1e4 # number of simulated experiments
p <- numeric(nSims) # set up empty variable to store all simulated p-values
for (i in 1:nSims) {
x <- rnorm(n = n, mean = 0, sd = 1) # produce N simulated participants
y <- rnorm(n = n, mean = 0 + cohensd, sd = 1) # produce N simulated participants
z <- t.test(x,y) # perform a t-test for independant samples
p[i] <- z$p.value # extract p-value
}
alpha <- .05
empirical_power <- (sum(p < alpha) / nSims)
if (cohensd == 0) {empirical_power <- 0} # if H0, then power = 0
# hist(
#     p, breaks = 20, ylab = "number of p-values", border = FALSE,
#     main = paste("p-value distribution with",
#         round(empirical_power * 100, digits = 0), "% power"),
#     xlim = c(0, 1), ylim = c(0, nSims), col = "steelblue")
#
# abline(h = nSims / 20, lty = 2)
# abline(v = .005, lty = 2)
# abline(v = .05, lty = 2)
par(mfrow = c(1, 2) )
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha = ", alpha, ")"),
col = "steelblue", lwd = 2)
abline(v = alpha, lty = 3, lwd = 2, col = "steelblue")
abline(v = mean(p), lty = 1, lwd = 2, col = "snow4")
alpha <- .005
empirical_power <- (sum(p < alpha) / nSims)
plot(
density(p, from = 0, to = 1), bty = "o", yaxt = "n", xlim = c(0.01, 1),
xlab = "", ylab = "",
main = paste0("p-value distribution for d = ", cohensd, " and n = ", n,
"\n power = ", round(empirical_power, digits = 2), " (at alpha = ", alpha, ")"),
col = "steelblue", lwd = 2)
abline(v = alpha, lty = 3, lwd = 2, col = "steelblue")
abline(v = mean(p), lty = 1, lwd = 2, col = "snow4")
options(scipen = 999) # disable scientific notation for numbers
cohensd <- 0.5 # set true effect size
n <- 50 # sample size in each group
nSims <- 1e4 # number of simulated experiments
p <- numeric(nSims) # set up empty variable to store all simulated p-values
for (i in 1:nSims) {
x <- rnorm(n = n, mean = 0, sd = 1) # produce N simulated participants
y <- rnorm(n = n, mean = 0 + cohensd, sd = 1) # produce N simulated participants
z <- t.test(x,y) # perform a t-test for independant samples
p[i] <- z$p.value # extract p-value
}
library(tidyverse)
alpha <- .05
p %>% left_joint(alpha)
p %>% left_join(alpha)
data.frame(p = p) %>% left_join(alpha)
data.frame(p = p) %>% left_join(data.frame(alpha = alpha) )
data.frame(p = p, alpha = alpha)
alpha <- c(.05, .005)
d <- data.frame(alpha = c(.05, .005) )
View(d)
data.frame(alpha = c(.05, .005) ) %>%
group_by(alpha) %>%
summarise(power = sum(p) < . / nSims)
data.frame(alpha = c(.05, .005) ) %>%
group_by(alpha) %>%
summarise(power = sum(p) < alpha / nSims)
data.frame(alpha = c(.05, .005) ) %>%
group_by(alpha) %>%
summarise(power = (sum(p) < alpha / nSims) )
sum(p)
data.frame(alpha = c(.05, .005) ) %>%
#group_by(alpha) %>%
mutate(power = (sum(p) < alpha / nSims) )
data.frame(alpha = c(.05, .005) ) %>%
#group_by(alpha) %>%
mutate(power = (sum(p) < . / nSims) )
data.frame(alpha = c(.05, .005) )
alpha = .05
(sum(p) < alpha / nSims)
data.frame(alpha = c(.05, .005) ) %>%
#group_by(alpha) %>%
mutate(power = (sum(p) < alpha) / nSims) )
data.frame(alpha = c(.05, .005) ) %>%
#group_by(alpha) %>%
mutate(power = (sum(p) < alpha) / nSims)
(sum(p < alpha) / nSims)
data.frame(alpha = c(.05, .005) ) %>%
group_by(alpha) %>%
mutate(power = (sum(p) < alpha) / nSims)
data.frame(alpha = c(.05, .005) ) %>%
group_by(alpha) %>%
mutate(power = (sum(p) < alpha) / nSims)
data.frame(alpha = c(.05, .005) ) %>%
group_by(alpha) %>%
mutate(power = (sum(p) < .) / nSims)
data.frame(alpha = c(.05, .005) ) %>%
group_by(alpha) %>%
mutate(power = (sum(p) < alpha) / nSims)
data.frame(alpha = c(.05, .005) ) %>%
group_by(alpha) %>%
mutate(power = (sum(p < alpha) / nSims) )
data.frame(alpha = c(.05, .005) ) %>%
group_by(alpha) %>%
mutate(
power = (sum(p < alpha) / nSims),
m = mean(p) )
d <-
data.frame(alpha = c(.05, .005) ) %>%
group_by(alpha) %>%
mutate(
power = (sum(p < alpha) / nSims),
m = mean(p) )
p %>% ggplot(aes(x = p) ) +
geom_density() +
theme_bw(base_size = 14)
data.frame(p = p) %>% ggplot(aes(x = p) ) +
geom_density() +
theme_bw(base_size = 14)
?facet_wrap
data.frame(p = p) %>% ggplot(aes(x = p) ) +
geom_density() +
facet_wrap(alpha) +
theme_bw(base_size = 14)
data.frame(p = p) %>% ggplot(aes(x = p) ) +
geom_density() +
facet_wrap(d$alpha) +
theme_bw(base_size = 14)
data.frame(p = p) %>% ggplot(aes(x = p) ) +
geom_density() +
facet_wrap(data = d, alpha) +
theme_bw(base_size = 14)
data.frame(p = p) %>% ggplot(aes(x = p) ) +
geom_density() +
facet_wrap(data = d, alpha)
data.frame(p = p) %>%
ggplot(aes(x = p) ) +
geom_density() +
theme_bw(base_size = 14)
data.frame(p = p) %>%
ggplot(aes(x = p) ) +
geom_density() +
labs(x = "p-value", y = "") +
theme_bw(base_size = 14)
data.frame(p = p) %>%
ggplot(aes(x = p) ) +
stat_density() +
labs(x = "p-value", y = "") +
theme_bw(base_size = 14)
data.frame(p = p) %>%
ggplot(aes(x = p) ) +
stat_density(fill = "grey60") +
labs(x = "p-value", y = "") +
theme_bw(base_size = 14)
library(patchwork)
devtools::install_github("thomasp85/patchwork")
p1 <-
data.frame(p = p) %>%
ggplot(aes(x = p) ) +
stat_density(fill = "grey60") +
labs(x = "p-value", y = "") +
theme_bw(base_size = 14)
p2 <-
data.frame(p = p) %>%
ggplot(aes(x = p) ) +
stat_density(fill = "grey60") +
labs(x = "p-value", y = "") +
theme_bw(base_size = 14)
library(patchwork)
install.packages(c("blogdown", "bookdown", "brms", "callr", "digest", "DT", "ggeffects", "globals", "haven", "Hmisc", "hms", "htmlTable", "htmlwidgets", "irlba", "kableExtra", "knitr", "lava", "listenv", "matrixStats", "MBESS", "mgcv", "microbenchmark", "mosaicData", "mvtnorm", "pbapply", "R.rsp", "RCurl", "Rdpack", "recipes", "reprex", "rpart", "rstan", "showtext", "sjlabelled", "sjstats", "snakecase", "sp", "spData", "StanHeaders", "survey", "sysfonts", "tidyr", "TTR", "visNetwork", "xaringan", "xml2"))
library(patchwork)
